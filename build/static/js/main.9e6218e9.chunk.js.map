{"version":3,"sources":["electionMaps/1997.png","electionMaps/2001.png","electionMaps/2005.png","electionMaps/2010.png","electionMaps/2015.png","electionMaps/2017.png","electionMaps/2019.png","ElectionVisualisation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ElectionVisualisation","props","state","data","Visualisation","layout","frames","config","electionIndex","slider","this","setState","class","style","width","height","useResizeHandler","onSliderChange","setSelectedIndexFromSliderChange","displayModeBar","responsive","autosizable","onLegendClick","Carousel","fade","interval","keyboard","wrap","controls","activeIndex","indicators","Item","src","image1997","alt","image2001","image2005","image2010","image2015","image2017","image2019","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"y8zCAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,kXC4E5BC,G,wDAzDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAAEC,KAAMC,EAAa,KAAUC,OAAQD,EAAa,OAAYE,OAAQF,EAAa,OAAYG,OAAQ,GAAIC,cAAe,GAF1H,E,6EAKcC,GAC7BC,KAAKC,SAAS,CAACH,cAAeC,EAAM,KAAN,W,+BAGxB,IAAD,OACL,OACI,yBAAKG,MAAM,MAAMC,MAAO,CAACC,MAAO,OAAQC,OAAO,SAC3C,yBAAKH,MAAM,UACP,kBAAC,IAAD,CACIC,MAAO,CAACC,MAAM,OAAQC,OAAO,QAC7BZ,KAAMO,KAAKR,MAAMC,KACjBa,kBAAkB,EAClBX,OAAQK,KAAKR,MAAMG,OACnBC,OAAQI,KAAKR,MAAMI,OACnBW,eAAgB,SAACR,GAAY,EAAKS,iCAAiCT,IACnEF,OAAQ,CAACY,gBAAgB,EAAOC,YAAY,EAAOC,aAAa,GAChEC,cAAe,WAAY,OAAO,MAI1C,yBAAKV,MAAM,UACP,yBAAKA,MAAM,kBACP,kBAACW,EAAA,EAAD,CAAUV,MAAO,GAAIW,MAAM,EAAMC,SAAU,KAAMC,UAAU,EAAOC,MAAM,EAAMC,UAAU,EAAOC,YAAanB,KAAKR,MAAMM,cAAesB,YAAY,GAC9I,kBAACP,EAAA,EAASQ,KAAV,KACI,yBAAKC,IAAKC,IAAWC,IAAI,MAE7B,kBAACX,EAAA,EAASQ,KAAV,KACI,yBAAKC,IAAKG,IAAWD,IAAI,MAE7B,kBAACX,EAAA,EAASQ,KAAV,KACI,yBAAKC,IAAKI,IAAWF,IAAI,MAE7B,kBAACX,EAAA,EAASQ,KAAV,KACI,yBAAKC,IAAKK,IAAWH,IAAI,MAE7B,kBAACX,EAAA,EAASQ,KAAV,KACI,yBAAKC,IAAKM,IAAWJ,IAAI,MAE7B,kBAACX,EAAA,EAASQ,KAAV,KACI,yBAAKC,IAAKO,IAAWL,IAAI,MAE7B,kBAACX,EAAA,EAASQ,KAAV,KACI,yBAAKC,IAAKQ,IAAWN,IAAI,c,GAhDrBO,IAAMC,Y,MCF3BC,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9e6218e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1997.bf08d0b7.png\";","module.exports = __webpack_public_path__ + \"static/media/2001.1659cae0.png\";","module.exports = __webpack_public_path__ + \"static/media/2005.1b73a129.png\";","module.exports = __webpack_public_path__ + \"static/media/2010.81fa100b.png\";","module.exports = __webpack_public_path__ + \"static/media/2015.a7910623.png\";","module.exports = __webpack_public_path__ + \"static/media/2017.0b0b3c6f.png\";","module.exports = __webpack_public_path__ + \"static/media/2019.d9cd319f.png\";","\nimport React from 'react';\nimport Plot from 'react-plotly.js';\nimport Visualisation from './visualisation.json';\n\nimport Carousel from 'react-bootstrap/Carousel';\n\nimport image1997 from './electionMaps/1997.png';\nimport image2001 from './electionMaps/2001.png';\nimport image2005 from './electionMaps/2005.png';\nimport image2010 from './electionMaps/2010.png';\nimport image2015 from './electionMaps/2015.png';\nimport image2017 from './electionMaps/2017.png';\nimport image2019 from './electionMaps/2019.png';\n\nimport './ElectionVisualisation.css';\n\n  \nclass ElectionVisualisation extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { data: Visualisation['data'], layout: Visualisation['layout'], frames: Visualisation['frames'], config: {}, electionIndex: 0 };\n    }\n\n    setSelectedIndexFromSliderChange(slider) {\n        this.setState({electionIndex: slider['step']['_index']})\n    }\n    \n    render() {\n        return (\n            <div class=\"row\" style={{width: '100%', height:'100%'}}>\n                <div class=\"colu-1\">\n                    <Plot\n                        style={{width:'100%', height:'100%'}}\n                        data={this.state.data}\n                        useResizeHandler={true}\n                        layout={this.state.layout}\n                        frames={this.state.frames}\n                        onSliderChange={(slider) => {this.setSelectedIndexFromSliderChange(slider); }}\n                        config={{displayModeBar: false, responsive: false, autosizable: true}}\n                        onLegendClick={function() {return false}}\n                    />\n                </div>\n\n                <div class=\"colu-2\" >\n                    <div class=\"caro-container\" >\n                        <Carousel style={{}} fade={true} interval={null} keyboard={false} wrap={true} controls={false} activeIndex={this.state.electionIndex} indicators={false}> \n                            <Carousel.Item> \n                                <img src={image1997} alt='' ></img>\n                            </Carousel.Item>\n                            <Carousel.Item>\n                                <img src={image2001} alt='' ></img>\n                            </Carousel.Item>\n                            <Carousel.Item>\n                                <img src={image2005} alt='' ></img>\n                            </Carousel.Item>\n                            <Carousel.Item>\n                                <img src={image2010} alt='' ></img>\n                            </Carousel.Item>\n                            <Carousel.Item>\n                                <img src={image2015} alt='' ></img>\n                            </Carousel.Item>\n                            <Carousel.Item>\n                                <img src={image2017} alt='' ></img>\n                            </Carousel.Item>\n                            <Carousel.Item>\n                                <img src={image2019} alt='' ></img>\n                            </Carousel.Item>\n                        </Carousel>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ElectionVisualisation;\n","import React from 'react';\nimport ElectionVisualisation from './ElectionVisualisation'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ElectionVisualisation />\n      </header>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}